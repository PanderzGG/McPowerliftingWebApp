@page "/progress"
@attribute [Authorize(Roles = "user")]

@using MCPowerlifting.Helper
@using MCPowerlifting.Models.Entities

@rendermode InteractiveServer

@inject UserService Userservice
@inject AppDbContext appDbContext
@inject NavigationManager navigationManager

<PageTitle>Progress</PageTitle>

<Div>
    <MudCarousel Class="mud-width-full" Style="height:70vH;" ShowArrows="@arrows" ShowBullets="@bullets" EnableSwipeGesture="@enableSwipeGesture" AutoCycle="@autocycle" TData="object">
        @foreach (var ex in workoutExercises.Select(x => x.Exercise.ExerciseName).Distinct())
        {
            var exerciseKey = ex.ToLower();
            <MudCarouselItem Transition="transition">
            <div class="" style="height:100%">
                @if (ExerciseSeriesMap.ContainsKey(exerciseKey) && ExerciseLabelsMap.ContainsKey(exerciseKey))
                {
                    <MudText Typo="Typo.h5" Class="mb-4">@ex Progress</MudText>

                    <MudChart ChartType="ChartType.Line"
                              ChartSeries="@ExerciseSeriesMap[exerciseKey]"
                              @bind-SelectedIndex="ExerciseIndexMap[exerciseKey]"
                              XAxisLabels="@ExerciseLabelsMap[exerciseKey]"
                              Width="100%"
                              Height="350px"
                              ChartOptions="@Options" />

                    <MudGrid>
                        <MudItem xs="6">
                            @{
                                var index = ExerciseIndexMap[exerciseKey];
                                var series = ExerciseSeriesMap[exerciseKey];
                            }
                            <MudText Typo="Typo.body1" Class="py-3">Selected: @(index < 0 ? "None" : series[index].Name)</MudText>
                        </MudItem>
                    </MudGrid>
                }
            </div>
            </MudCarouselItem>
        }
    </MudCarousel>
</Div>


@code {
    // Carousel configuration
    private bool arrows = true;
    private bool bullets = true;
    private bool enableSwipeGesture = false;
    private bool autocycle = false;
    private Transition transition = Transition.Slide;

    // Chart configuration
    public ChartOptions Options = new ChartOptions();

    // Data collections
    private List<Workout> workouts = new List<Workout>();
    private List<WorkoutExercise> workoutExercises = new List<WorkoutExercise>();
    private List<ProgressData> exerciseData = new List<ProgressData>();

    // Chart data dictionaries (key: exercise name in lowercase)
    private Dictionary<string, List<ChartSeries>> ExerciseSeriesMap = new Dictionary<string, List<ChartSeries>>();
    private Dictionary<string, string[]> ExerciseLabelsMap = new Dictionary<string, string[]>();
    private Dictionary<string, int> ExerciseIndexMap = new Dictionary<string, int>();

    /// <summary>
    /// Initialize component and load data
    /// </summary>
    override protected async Task OnInitializedAsync()
    {
        await LoadData();
        PopulateAllExerciseCharts();
    }

    /// <summary>
    /// Generate charts for all exercises found in workout data
    /// </summary>
    private void PopulateAllExerciseCharts()
    {
        foreach (var exerciseName in workoutExercises.Select(x => x.Exercise.ExerciseName).Distinct())
        {
            PopulateExerciseChart(exerciseName);
        }
    }

    /// <summary>
    /// Creates chart data for a specific exercise
    /// </summary>
    /// <param name="exerciseName">Name of the exercise to chart</param>
    private void PopulateExerciseChart(string exerciseName)
    {
        var exerciseKey = exerciseName.ToLower();

        // Filter data for this specific exercise
        var exerciseData = this.exerciseData
            .Where(x => x.ExerciseName.ToLower() == exerciseKey)
            .OrderBy(x => x.Date)
            .ToList();

        if (exerciseData.Any())
        {
            // Create X-axis labels from dates
            ExerciseLabelsMap[exerciseKey] = exerciseData.Select(x => x.Date.ToString("MM/dd")).ToArray();

            // Create data series with weights
            var series = new ChartSeries
            {
                Name = exerciseName,
                Data = exerciseData.Select(x => (double)x.SetWeight).ToArray()
            };

            // Add to collections
            ExerciseSeriesMap[exerciseKey] = new List<ChartSeries> { series };
            ExerciseIndexMap[exerciseKey] = -1; // Default index value
        }
        else
        {
            // Fallback for empty data
            ExerciseLabelsMap[exerciseKey] = new[] { "No Data" };
            ExerciseSeriesMap[exerciseKey] = new List<ChartSeries> { new ChartSeries { Name = "No data", Data = new[] { 0.0 } } };
            ExerciseIndexMap[exerciseKey] = -1;
        }
    }

    /// <summary>
    /// Load user workout data from database
    /// </summary>
    protected async Task LoadData()
    {
        var userId = Userservice.GetCurrentUserId();
        workouts = appDbContext.Workouts.Where(x => x.UserId == userId).ToList();

        foreach (var workout in workouts)
        {
            workoutExercises.AddRange(await appDbContext.workoutExercises
                .Include(x => x.Exercise)
                .Include(x => x.Workout)
                .Where(x => x.WorkoutId == workout.WorkoutId)
                .ToListAsync());
        }

        workoutExercises = workoutExercises.OrderByDescending(x => x.WorkoutId).ToList();

        // Transform workout exercises into chart data points
        foreach (var exercise in workoutExercises)
        {
            exerciseData.Add(new ProgressData
            {
                ExerciseName = exercise.Exercise.ExerciseName,
                SetWeight = (decimal)exercise.ActualWeight,
                Date = exercise.Workout.Date.Date
            });
        }
    }
}
