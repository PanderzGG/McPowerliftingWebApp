@page "/Workout/next-workout"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using MudCow.Helper
@using MudCowV2.Components.Pages.Utility
@using MudCowV2.Data
@using MudCowV2.Helper
@using MudCowV2.Models.Entities
@using MudCowV2.Models.ViewModels
@using MudCowV2.Services
@using System.Security.Claims

@* @inject UserService Userservice *@
@inject AppDbContext appDbContext
@inject NavigationManager navigationManager
@inject IDialogService DialogService

<PageTitle>Nächstes Training</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-6">
    <MudCard Elevation="3" Class="mx-auto" Style="max-width: 600px;">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h4" Color="Color.Primary" Align="Align.Center">
                    Training für Heute
                </MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudIcon Icon="@Icons.Material.Filled.FitnessCenter" Color="Color.Primary" Size="Size.Large"/>
            </CardHeaderActions>
        </MudCardHeader>

        <MudDivider Class="my-2"/>

        <MudCardContent>
            @if(!doneToday)
            {
                <MudPaper Elevation="0" Class="pa-4">
                    <MudStack>
                        @foreach (var exercise in nextWorkoutWeights)
                        {
                            double weight = exercise.Value * 2;
                            double roundedWeight = Math.Round(weight, MidpointRounding.AwayFromZero) / 2;

                            <div class="d-flex justify-space-between align-center">
                                <MudText Typo="Typo.h6">@exercise.Key</MudText>
                                <MudText Color="Color.Primary" Class="ml-4">@roundedWeight kg</MudText>
                            </div>
                            <MudDivider Class="my-2"/>
                        }
                    </MudStack>
                </MudPaper>
            }
            else
            {
                <MudAlert Severity="Severity.Success" Variant="Variant.Filled" Class="my-4">
                    <MudText>Super gemacht! Dein Training für heute ist abgeschlossen. Komm morgen wieder!</MudText>
                </MudAlert>
            }
        </MudCardContent>

        @if (!doneToday)
        {
            <MudCardActions Class="d-flex justify-center pa-4">
                <MudButton Variant="Variant.Filled"
                Color="Color.Primary"
                Size="Size.Large"
                OnClick="OpenStartWorkoutDialog"
                StartIcon="@Icons.Material.Filled.PlayArrow"
                Class="px-8">
                    Training Starten
                </MudButton>
            </MudCardActions>
        }
    </MudCard>
</MudContainer>

@code{
    [Inject] private AuthenticationStateProvider AuthStateProvider { get; set; }

    // ViewModel für die Übertragung von Daten zur nächsten Komponente
    private NextWorkoutViewModel Model = new NextWorkoutViewModel();

    // Helper für die Berechnung der Gewichte nach dem MadCow-Programm
    private MadCowWorkoutCalculator madCowWorkoutCalculator = new MadCowWorkoutCalculator();

    // Datenstrukturen für die Verwaltung der Trainingshistorie
    private List<Workout> Workouts { get; set; } = new List<Workout>();
    private List<WorkoutExercise>? WorkoutExercises { get; set; } = new List<WorkoutExercise>();
    private List<Starting_Weights> startingWeights { get; set; } = new List<Starting_Weights>();
    private List<NextWorkoutViewModel> NextWorkout { get; set; } = new List<NextWorkoutViewModel>();

    // Aktuelle Gewichte für das nächste Training
    private Dictionary<string, double> nextWorkoutWeights = new Dictionary<string, double>();


    private int? userId;
    private bool doneToday = false;

    // Initialisierung der Komponente beim ersten Laden
    override protected async Task OnInitializedAsync()
    {
        await LoadData();
    }

    // Lädt alle relevanten Daten für die Workout-Planung
    protected async Task LoadData()
    {
        bool hasWorkout = false;
        bool hasStartingWeights = false;
        int lastWorkoutId = 0;

        // Lade alle Übungen aus der Datenbank
        List<Exercise> Exercises = new List<Exercise>();
        Exercises = await appDbContext.Exercises.ToListAsync();

        // Lade Benutzer-spezifische Daten
        userId = await GetUserIdAsync();
        Workouts = await appDbContext.Workouts.Where(workout => workout.UserId == userId.Value).ToListAsync();

        // Überprüfe, ob es bereits Workouts gibt und ob heute schon trainiert wurde
        if (Workouts.Count() != 0)
        {
            Workouts = Workouts.OrderByDescending(x => x.Date).ToList();
            lastWorkoutId = Workouts.FirstOrDefault().WorkoutId;

            if(Workouts.First().Date.Date == DateTime.Now.Date)
            {
                doneToday = true;
            }

        }

        // Lade die Anfangsgewichte des Benutzers
        startingWeights = await appDbContext.startingWeights.Where(x => x.UserId == userId).ToListAsync();

        hasWorkout = Workouts.Any(x => x.UserId == userId.Value);
        hasStartingWeights = startingWeights.Any(x => x.UserId == userId.Value);

        // FALL 1: Erstes Workout - nutze Anfangsgewichte
        if (!hasWorkout && hasStartingWeights)
        {
            // Erstelle für jede Übung einen Eintrag mit den Anfangsgewichten
            foreach (var startingweight in startingWeights.Where(x => x.UserId == userId.Value))
            {
                NextWorkoutViewModel newModel = new NextWorkoutViewModel
                    {
                        exerciseName = Exercises.Find(x => x.ExerciseId == startingweight.ExerciseId).ExerciseName,
                        weight = startingweight.Weight,
                        isNew = true,
                        isSuccesful = true,
                        workoutLoad = "medium"
                    };
                NextWorkout.Add(newModel);
            }
            nextWorkoutWeights = madCowWorkoutCalculator.NextWorkoutWeights(NextWorkout);
        }
        // FALL 2: Folge-Workout - basierend auf vorherigen Workouts
        else if (hasWorkout)
        {
            // Bestimme die Last des nächsten Workouts basierend auf dem letzten Workout
            // (MadCow rotiert zwischen light, medium und heavy)
            string lastLoad;
            string newLoad = "";
            bool lastNew;

            lastLoad = Workouts.FirstOrDefault().Load;

            // Bestimme die neue Last für das nächste Workout und lade relevante Übungen
            switch (lastLoad)
            {
                case "light":
                    WorkoutExercises = await appDbContext.workoutExercises.Where(x => x.Workout.Load == "heavy" ).ToListAsync();
                    newLoad = "heavy";
                    break;
                case "medium":
                    WorkoutExercises = await appDbContext.workoutExercises.Where(x => x.Workout.Load == "light").ToListAsync();
                    newLoad = "light"; 
                    break;
                case "heavy":
                    WorkoutExercises = await appDbContext.workoutExercises.Where(x => x.Workout.Load == "medium").ToListAsync();
                    newLoad = "medium";
                    break;
            }
            
            // Wenn keine passenden WorkoutExercises gefunden wurden, nutze Anfangsgewichte
            if(WorkoutExercises.Count() == 0)
            {
                foreach(var startingweight in startingWeights.Where(x => x.UserId == userId.Value))
                {
                    NextWorkoutViewModel newModel = new NextWorkoutViewModel
                        {
                            exerciseName = Exercises.Find(x => x.ExerciseId == startingweight.ExerciseId).ExerciseName,
                            weight = startingweight.Weight,
                            isNew = true,
                            isSuccesful = true,
                            workoutLoad = newLoad
                        };
                    NextWorkout.Add(newModel);
                }
            }
            else
            {
                // Basierend auf dem letzten Load-Typ, erstelle die passenden Workout-Einträge
                switch (lastLoad)
                {
                    case "light":
                        // Logik für Wechsel von light zu heavy
                        foreach (var startingWeight in WorkoutExercises)
                        {
                            NextWorkoutViewModel newModel = new NextWorkoutViewModel
                                {
                                    exerciseName = Exercises.Find(x => x.ExerciseId == startingWeight.ExerciseId).ExerciseName,
                                    weight = startingWeight.ActualWeight,
                                    isNew = false,
                                    isSuccesful = startingWeight.IsSuccessful,
                                    workoutLoad = newLoad
                                };
                            NextWorkout.Add(newModel);
                        }
                        break;
                    case "medium":
                        // Spezialfall: Wenn kein light-Workout existiert, nutze Anfangsgewichte
                        if (!Workouts.Any(x => x.Load == "light"))
                        {
                            foreach (var startingWeight in startingWeights.Where(x => x.UserId == userId.Value))
                            {
                                NextWorkoutViewModel newModel = new NextWorkoutViewModel
                                    {
                                        exerciseName = Exercises.Find(x => x.ExerciseId == startingWeight.ExerciseId).ExerciseName,
                                        weight = startingWeight.Weight,
                                        isNew = true,
                                        isSuccesful = true,
                                        workoutLoad = newLoad
                                    };
                                NextWorkout.Add(newModel);
                            }
                        }
                        else
                        {
                            // Ansonsten nutze die Gewichte aus dem letzten light-Workout
                            foreach (var startingWeight in WorkoutExercises)
                            {
                                NextWorkoutViewModel newModel = new NextWorkoutViewModel
                                    {
                                        exerciseName = Exercises.Find(x => x.ExerciseId == startingWeight.ExerciseId).ExerciseName,
                                        weight = startingWeight.ActualWeight,
                                        isNew = false,
                                        isSuccesful = startingWeight.IsSuccessful,
                                        workoutLoad = newLoad
                                    };
                                NextWorkout.Add(newModel);
                            }
                        }
                        break;
                    case "heavy":
                        // Logik für Wechsel von heavy zu medium
                        foreach (var startingWeight in WorkoutExercises)
                        {
                            NextWorkoutViewModel newModel = new NextWorkoutViewModel
                                {
                                    exerciseName = Exercises.Find(x => x.ExerciseId == startingWeight.ExerciseId).ExerciseName,
                                    weight = startingWeight.ActualWeight,
                                    isNew = false,
                                    isSuccesful = startingWeight.IsSuccessful,
                                    workoutLoad = newLoad
                                };
                            NextWorkout.Add(newModel);
                        }
                        break;
                }
            }
            // Berechne die finalen Gewichte für das nächste Workout
            nextWorkoutWeights = madCowWorkoutCalculator.NextWorkoutWeights(NextWorkout);
        }
    }
    
    private async Task<int> GetUserIdAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var userIdClaim = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier);

        if (userIdClaim != null && int.TryParse(userIdClaim.Value, out var userId))
        {
            return userId;
        }

        return 0; // oder einen Standardwert oder eine Exception werfen
    }

    // Startet ein neues Workout basierend auf der Trainingshistorie
    private async Task OpenStartWorkoutDialog()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Small
        };

        var dialog = await DialogService.ShowAsync<StartWorkoutDialog>("Training Starten", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await StartWorkout();
        }
    }

    private async Task StartWorkout()
    {
        bool newWorkout = false;
        string url = "";
        DateTime date = DateTime.Now;

        Workout? lastWorkout = await appDbContext.Workouts.Where(x => x.UserId == userId.Value).OrderByDescending(x => x.Date).FirstOrDefaultAsync();

        // Wenn es in den letzten 30 Tagen ein Workout gab, führe den normalen Workflow fort
        if (Workouts.Any(x => x.Date > DateTime.Now.AddDays(-30)))
        {
            url = "/Workout/active-workout";

            // Erstelle ein neues Workout, wenn das letzte nicht von heute ist
            if (date.Date != lastWorkout?.Date)
            {
                Workout workout = new Workout();
                // Rotiere den Workout-Typ basierend auf dem letzten Workout
                switch (lastWorkout.Load)
                {
                    case "light":
                        workout.UserId = userId.Value;
                        workout.Date = date.Date;
                        workout.Load = "heavy";
                        break;
                    case "medium":
                        workout.UserId = userId.Value;
                        workout.Date = date.Date;
                        workout.Load = "light";
                        break;
                    case "heavy":
                        workout.UserId = userId.Value;
                        workout.Date = date.Date;
                        workout.Load = "medium";
                        break;
                }
                appDbContext.Workouts.Add(workout);
            }
        }
        else
        {
            // Falls kein Workout in den letzten 30 Tagen, starte mit einem neuen Workout
            newWorkout = true;

            url = $"/Workout/active-workout?isNew={newWorkout}";

            Workout workout = new Workout
                {
                    UserId = userId.Value,
                    Date = date.Date,
                    Load = "medium"
                };


            appDbContext.Workouts.Add(workout);
            navigationManager.NavigateTo(url);
        }
        // Speichere die Änderungen in der Datenbank und navigiere zur Workout-Seite
        try
        {
            await appDbContext.SaveChangesAsync();
        }
        catch (Exception ex)
        {
            // Fehlerbehandlung sollte hier erweitert werden
            return;
        }
        navigationManager.NavigateTo(url);
    }

}