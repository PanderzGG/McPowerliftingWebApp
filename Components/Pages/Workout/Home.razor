@page "/"
@attribute [Authorize(Roles = "user")]

@rendermode InteractiveServer

@using MCPowerlifting.Helper
@using MCPowerlifting.Models.Entities
@using MCPowerlifting.Models.ViewModels

@inject UserService Userservice
@inject AppDbContext appDbContext
@inject NavigationManager navigationManager

<PageTitle>Next Workout</PageTitle>

<Div Class="d-grid">
    <Card Class="col-4 mx-auto">
        <CardHeader>
            <h2 Class="text-center">Next Workout</h2>
        </CardHeader>
        <CardBody>
            <ListGroup>
                @foreach (var exercise in nextWorkoutWeights)
                {
                    <ListGroupItem>@exercise.Key: @exercise.Value Kg</ListGroupItem>
                }
            </ListGroup>

        </CardBody>
        <CardFooter Display="Display.Flex" Class="justify-content-center">
            <!-- Button trigger modal -->
            <Button Color="Color.Primary" Clicked="@ShowModal" Style="width:20rem;">Start Workout</Button>
        </CardFooter>
    </Card>
</Div>


<!--Modal-->
<Modal @ref="StartWorkoutModal">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Start workout?</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            Do you want to start the workout now?
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal" >Not yet</Button>
            <Button Color="Color.Primary" Clicked="@HideModal" @onclick="StartWorkout">Start Workout</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code{

    private NextWorkoutViewModel Model = new NextWorkoutViewModel();

    private MadCowWorkoutCalculator madCowWorkoutCalculator = new MadCowWorkoutCalculator();

    private List<Workout> Workouts { get; set; } = new List<Workout>();
    private List<Starting_Weights> startingWeights { get; set; } = new List<Starting_Weights>();
    private List<NextWorkoutViewModel> NextWorkout { get; set; } = new List<NextWorkoutViewModel>();

    private Dictionary<string, double> nextWorkoutWeights = new Dictionary<string, double>();

    private int? userId;

    override protected async Task OnInitializedAsync()
    {
        bool hasWorkout = false;
        bool hasStartingWeights = false;

        List<Exercise> Exercises = new List<Exercise>();
        Exercises = await appDbContext.Exercises.ToListAsync();

        userId = Userservice.GetCurrentUserId();
        Workouts = await appDbContext.Workouts.Where(workout => workout.UserId == userId.Value).ToListAsync();
        startingWeights = await appDbContext.startingWeights.ToListAsync();

        hasWorkout = Workouts.Any(x => x.UserId == userId.Value);
        hasStartingWeights = startingWeights.Any(x => x.UserId == userId.Value);

        if (!hasWorkout && hasStartingWeights)
        {
            foreach (var startingweight in startingWeights.Where(x => x.UserId == userId.Value))
            {
                NextWorkoutViewModel newModel = new NextWorkoutViewModel
                    {
                        exerciseName = Exercises.Find(x => x.ExerciseId == startingweight.ExerciseId).ExerciseName,
                        weight = startingweight.Weight,
                        isNew = true,
                        workoutLoad = "medium"
                    };
                NextWorkout.Add(newModel);
            }

            nextWorkoutWeights = madCowWorkoutCalculator.NextWorkoutWeights(NextWorkout);
        }

    }

    private async Task StartWorkout() 
    {
        bool newWorkout = false;
        DateTime date = DateTime.Now;
        Workout currentWorkout = new Workout();
        Workout? lastWorkout = await appDbContext.Workouts.Where(x => x.UserId == userId.Value).OrderByDescending(x => x.Date).FirstOrDefaultAsync();

        if (Workouts.Any(workout => workout.Date > DateTime.Now.AddDays(-10)) && NextWorkout.Any(x => x.isNew == false))
        {
            if (currentWorkout.Date == lastWorkout?.Date)
            {
                lastWorkout.Date = date;                
            }
            else
            {
                switch (lastWorkout.Load)
                {
                    case "light":
                        currentWorkout.UserId = userId.Value;
                        currentWorkout.Date = date.Date;

                        break;
                    case "medium":
                        break;
                    case "heavy":
                        break;
                }
            }

            navigationManager.NavigateTo("/active-workout");
        }
        else
        {
            newWorkout = true;

            string url = $"/active-workout?isNew={newWorkout}";

            currentWorkout.UserId = userId.Value;
            currentWorkout.Date = date.Date;
            currentWorkout.Load = "heavy";

            

            navigationManager.NavigateTo(url);
        }

    }
    // TODO: Implement Deload
    private void StartWorkoutDeload()
    {

    }

    private void NavigateTest()
    {
        navigationManager.NavigateTo("/test");    
    }

    #region Modal
    // reference to the modal component
    private Modal StartWorkoutModal;

    private Task ShowModal()
    {
        return StartWorkoutModal.Show();
    }

    private Task HideModal()
    {
        return StartWorkoutModal.Hide();
    }
    #endregion

}