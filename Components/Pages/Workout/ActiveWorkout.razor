@page "/active-workout"
@attribute [Authorize(Roles = "user")]

@using MCPowerlifting.Helper
@using MCPowerlifting.Models.Entities
@using MCPowerlifting.Models.ViewModels
@using System.Timers

@rendermode InteractiveServer
@inject UserService Userservice
@inject AppDbContext appDbContext
@inject NavigationManager navigationManager

<Div Display="Display.Flex" Class="justify-content-center" Style="min-width:30rem;">
    <Card Display="Display.Flex" Style="max-width:fit-content;">
        <CardHeader>
            <h1>Active Workout</h1>
        </CardHeader>
        <CardBody Display="Display.Flex" Class="justify-content-center">
            @* Zustand 1: Workout noch nicht gestartet - zeigt geplante Übungen und Gewichte *@
            @if (!isActive)
            {
                // Listen-Darstellung der geplanten Übungen mit Gewichten
                <ListGroup Display="Display.Flex">
                    @foreach (var exercise in activeWeights)
                    {
                        double roundedWeight = Math.Round(exercise.Value, 2);

                        <ListGroupItem>
                            <Card Class="justify-content-center mx-4">
                                <CardBody Display="Display.Flex" Class="justify-content-center mx-4">
                                    <h4>@exercise.Key: @roundedWeight Kg</h4>
                                </CardBody>
                            </Card>
                        </ListGroupItem>

                    }
                </ListGroup>
            }
            @* Zustand 2: Workout gestartet, aber keine spezifische Übung ausgewählt *@
            else if (isActive && !inExercise)
            {
                // Anzeige der Gesamtzeit und aller Übungen mit Fortschritt
                <CardBody>
                    <p>@overallFormattedTime</p>
                    @foreach (var exercise in activeWeights)
                    {
                        double weight = exercise.Value * 2;
                        double roundedWeight = Math.Round(weight, MidpointRounding.AwayFromZero) / 2;

                        if(!doneExercises.Contains(exercise.Key))
                        {
                            <Card Class="my-2">
                                <CardHeader>
                                    <h2>@exercise.Key</h2>
                                </CardHeader>
                                <CardBody>
                                    <h4>Weight: @roundedWeight Kg</h4>
                                </CardBody>
                                <CardFooter Display="Display.Flex" Class="justify-content-center">
                                    <Button Color="Color.Primary" @onclick="() => StartExercise(exercise.Key)">Start @exercise.Key</Button>
                                </CardFooter>
                            </Card>
                        }
                        else
                        {
                            <Card Class="my-2">
                                <CardHeader>
                                    <h2>@exercise.Key</h2>
                                </CardHeader>
                                <CardBody>
                                    <h4>Weight: @roundedWeight Kg</h4>
                                </CardBody>
                                <CardFooter Display="Display.Flex" Class="justify-content-center">
                                    @* <Button Color="Color.Primary" @onclick="() => StartExercise(exercise.Key)">Start @exercise.Key</Button> *@
                                    <Alert Color="Color.Success">
                                        <AlertMessage>
                                            Done
                                        </AlertMessage>
                                    </Alert>
                                </CardFooter>
                            </Card>
                        }

                    }
                </CardBody>
            }
            @* Zustand 3: Eine spezifische Übung ist aktiv *@
            @if (isActive && inExercise)
            {
                // Übungsname und Aufwärm-/Arbeitssätze
                <Div Display="Display.Flex" Class="flex-column">
                    <Div Display="Display.Flex" Class="justify-content-center">
                        <h1>@currentExercise</h1>
                    </Div>
                    @if (!warmUpDone)
                    {
                        <Card Style="width:auto;">
                            <CardHeader>
                                <h3>Warm Up</h3>
                            </CardHeader>
                            <CardBody Display="Display.Flex" Class="justify-content-evenly">
                                @if (!setList.Any(x => x.SetType == "warmup"))
                                {
                                    <ListGroup Flush>
                                        <ListGroupItem>
                                            <p>Not Enough weight on your working set yet.</p>
                                        </ListGroupItem>
                                        <ListGroupItem>
                                            <p>No warm up needed. Jump straight to the working sets</p>
                                        </ListGroupItem>
                                        <ListGroupItem>
                                            <Button Color="Color.Success" @onclick="() => warmUpDone = true">Okay</Button>
                                        </ListGroupItem>
                                    </ListGroup>
                                }
                                else
                                {
                                    @foreach (var set in setList.Where(x => x.SetType == "warmup"))
                                    {
                                        <Card Class="mx-2">
                                            <CardHeader Display="Display.Flex" Class="justify-content-center">
                                                <h4>Set @set.SetNumber</h4>
                                            </CardHeader>
                                            <CardBody>
                                                @if (set.IsSuccessful == null)
                                                {
                                                    <h4>Weight: @set.SetWeight Kg</h4>
                                                    <h4>Reps: @set.SetReps</h4>
                                                }
                                                else
                                                {
                                                    <Alert Color="Color.Success" Visible>
                                                        <AlertMessage>Warm Up set Done</AlertMessage>
                                                    </Alert>
                                                }
                                            </CardBody>
                                            <CardFooter>
                                                <Button Color="Color.Success" name="@set.SetNumber" Clicked="() => WarmUpSetDone(set)">Done</Button>
                                            </CardFooter>
                                        </Card>
                                    }
                                }
                            </CardBody>
                        </Card>
                    }
                    else
                    {
                        <Card Display="Display.Flex">
                            <CardHeader>
                                Working Sets
                            </CardHeader>
                            <CardBody Display="Display.Flex">
                                @foreach (var set in setList.Where(x => x.SetType == "working"))
                                {
                                    double weight = set.SetWeight * 2;
                                    double roundedWeight = Math.Round(weight, MidpointRounding.AwayFromZero) / 2;

                                    <Card Class="mx-3">
                                        <CardHeader>
                                            @if (set.IsSuccessful.HasValue && set.IsSuccessful.Value)
                                            {
                                                <Div><h4>Set @set.SetNumber</h4></Div>
                                                <Div>
                                                    <Alert Color="Color.Success" Visible>
                                                        <AlertMessage>Set successful!</AlertMessage>
                                                    </Alert>
                                                </Div>

                                            }
                                            else if (set.IsSuccessful.HasValue && !set.IsSuccessful.Value)
                                            {
                                                <Div>
                                                    <h4>Set @set.SetNumber</h4>
                                                </Div>
                                                <Div>
                                                    <Alert Color="Color.Danger" Visible>
                                                        <AlertMessage>Failed set.</AlertMessage>
                                                    </Alert>
                                                </Div>

                                            }
                                            else
                                            {
                                                <h4>Set @set.SetNumber</h4>
                                            }
                                        </CardHeader>
                                        @if (set.IsSuccessful == null)
                                        {
                                            <CardBody>
                                                <h4>Weight: @roundedWeight Kg</h4>
                                                <h4>Reps: @set.SetReps</h4>
                                            </CardBody>
                                        }
                                        @if (set.IsSuccessful == null)
                                        {
                                            <CardFooter>
                                                <Buttons>
                                                    <Button Color="Color.Success" name="@($"success-{set.SetNumber}")" Clicked="() => WorkingSetDone(set, true)">Success</Button>
                                                    <Button Color="Color.Danger" name="@($"failed-{set.SetNumber}")" Clicked="() => WorkingSetDone(set, false)">Failed</Button>
                                                </Buttons>
                                            </CardFooter>
                                        }
                                    </Card>
                                }
                            </CardBody>
                            <CardFooter>
                                <Button Color="Color.Dark" Clicked="AbortModalShow">Abort Exercise</Button>
                                <Button Color="Color.Primary" Clicked="FinishExercise">Finish Exercise</Button>
                            </CardFooter>
                        </Card>
                    }
                </Div> 
            }
        </CardBody>
        @if (!isActive)
        {
            <CardFooter Display="Display.Flex" Class="justify-content-between">
                <Button Color="Color.Dark" @onclick="AbortWorkout">Back</Button>
                <Button Color="Color.Primary" @onclick="ProgramStart">Start Time</Button>
            </CardFooter>
        }
        @if (isActive && !inExercise)
        {

            if(activeWeights.Count() == doneExercises.Count())
            {
                <CardFooter Display="Display.Flex" Class="justify-content-center">
                    <Button Color="Color.Success" @onclick="FinishWorkout">Finish Workout</Button>
                </CardFooter>
            }
            else
            {
                <CardFooter Display="Display.Flex" Class="justify-content-center">
                    <Button Color="Color.Danger" @onclick="AbortCurrent">Cancel Workout</Button>
                </CardFooter>
            }

        }
    </Card>
</Div>

<!-- #region Modal-->
<Modal @ref="abortModal">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Cancel Exercise?</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Alert Color="Color.Danger" Visible>
                <AlertMessage>
                    If you cancel the Exercise all progress will be lost!
                </AlertMessage>
            </Alert>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="AbortModalHide">Cancel</Button>
            <Button Color="Color.Primary" Clicked="@(() => {AbortExercise(); AbortModalHide();})">Abort</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
<!-- #endregion -->



@code {
    // ViewModel für die aktive Workout-Sitzung
    private ActiveWorkoutViewModel Model = new ActiveWorkoutViewModel();
    
    // Helper für die Berechnung der MadCow-spezifischen Gewichte
    private MadCowWorkoutCalculator madCowWorkoutCalculator = new MadCowWorkoutCalculator();

    // Datenstruktur für die aktive Übung
    private ActiveExercise activeExercise = new ActiveExercise();

    // Listen für den Zugriff auf Datenbank-Entitäten
    private List<Exercise> exercises = new List<Exercise>();
    private List<Workout> workouts = new List<Workout>();
    private List<WorkoutExercise>? workoutExercises = new List<WorkoutExercise>();
    
    // Liste für bereits absolvierte Übungen in der aktuellen Sitzung
    private List<string> doneExercises = new List<string>();

    // Liste für Aufwärm- und Arbeitssätze der aktuellen Übung
    private List<ActiveExercise> setList = new List<ActiveExercise>();

    // Aktuelle Gewichte für alle Übungen dieser Trainingseinheit
    private Dictionary<string, double> activeWeights = new Dictionary<string, double>();

    // Timer für die Trainingszeit
    private Timer overallTimer = new Timer();
    private int overallCurrentTime = 0;
    private string overallFormattedTime => TimeSpan.FromSeconds(overallCurrentTime).ToString(@"hh\:mm\:ss");
    //Todo: Implementierung auswahl verschiedener Workouts
    // private List<Program> programs = new List<Program>();
    // InDev hilfe, da nur ein program
    
    // Aktuelle Trainingsparameter
    private string aktivesProgram = "madcow 5x5";
    private string currentExercise;

    // Statusflags zur Steuerung der UI-Ansicht
    private bool isActive = false;
    private bool inExercise = false;
    private bool warmUpDone = false;

    // Flag zur Identifizierung eines neuen Workout-Zyklus
    private bool isNew = false;

    // Initialisierung des Timers beim Erstladen der Komponente
    protected override void OnInitialized()
    {
        overallTimer = new Timer(1000);
        overallTimer.Elapsed += OnTimerElapsed;
        overallTimer.AutoReset = true;
    }

    // Timer-Callback: Aktualisiert die Anzeige jede Sekunde
    private void OnTimerElapsed(object sender, ElapsedEventArgs e)
    {
        overallCurrentTime++;
        InvokeAsync(() => StateHasChanged());
    }

    // Lädt alle notwendigen Daten beim Start der Komponente
    override protected async Task OnInitializedAsync()
    {
        // Benutzer-ID laden und im Model speichern
        var userId = Userservice.GetCurrentUserId();
        if(userId.Value != null)
        {
            Model.UserId = userId.Value;
        }
        
        // Query-Parameter aus der URL auslesen (für isNew-Parameter)
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        var queryParameters = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        // Grundlegende Daten aus der Datenbank laden
        exercises = await appDbContext.Exercises.ToListAsync();
        workoutExercises = await appDbContext.workoutExercises.ToListAsync();
        workouts = await appDbContext.Workouts.Where(x => x.UserId == userId).ToListAsync();
        workouts = workouts.OrderByDescending(x => x.Date).ToList();

        // Entscheidungslogik: Neues Workout oder Fortsetzung eines bestehenden Zyklus
        if (queryParameters.TryGetValue("isNew", out var isNewParam))
        {
            // Fall: Neues Workout - basierend auf Anfangsgewichten
            isNew = bool.Parse(isNewParam);

            if(isNew != null && true)
            {
                // Lädt Anfangsgewichte des Benutzers und berechnet die Trainingsgewichte
                List<Starting_Weights> startingWeights = new List<Starting_Weights>();
                startingWeights = await appDbContext.startingWeights.Where(x => x.UserId == userId).ToListAsync();

                activeWeights = madCowWorkoutCalculator.CalculateFromStartingWeight(startingWeights, "medium");

                Model.WorkoutLoad = "medium";
            }
        }
        else
        {
            // Fall: Fortsetzung des Zyklus - basierend auf vorherigen Workouts
            int? lastWorkoutId = workouts.FirstOrDefault(x => x.Date.Date != DateTime.Now.Date)?.WorkoutId;


            if (lastWorkoutId != null)
            {
                // Vorbereitung der Datenstrukturen
                List<WorkoutExercise> lastWorkoutExercises = new List<WorkoutExercise>();
                List<ActiveExercise> lastExercises = new List<ActiveExercise>();

                // Bestimme den Load-Typ des letzten Workouts
                string load = workouts.FirstOrDefault(x => x.WorkoutId == lastWorkoutId).Load;

                // MadCow-Rotation des Load-Typs basierend auf dem letzten Workout
                switch(load.ToLower())
                {
                    case "light":
                        Model.WorkoutLoad = "heavy";
                        break;
                    case "medium":
                        Model.WorkoutLoad = "light";
                        break;
                    case "heavy":
                        Model.WorkoutLoad = "medium";
                        break;
                }

                // Suche nach einem früheren Workout mit dem gleichen Load-Typ
                if (workouts.Any(x => x.Load == Model.WorkoutLoad && x.Date.Date != DateTime.Now.Date))
                {
                    // Finde das letzte Workout mit dem aktuellen Load-Typ
                    lastWorkoutId = workouts.FirstOrDefault(x => x.Load == Model.WorkoutLoad && x.Date.Date != DateTime.Now.Date).WorkoutId;
                    lastWorkoutExercises = workoutExercises.Where(x => x.WorkoutId == lastWorkoutId).ToList();

                    // Konvertiere die WorkoutExercise-Einträge in ActiveExercise-Objekte
                    foreach (var exercise in lastWorkoutExercises)
                    {

                        lastExercises.Add(new ActiveExercise
                            {
                                ExerciseName = exercise.Exercise.ExerciseName,
                                Load = Model.WorkoutLoad,
                                SetWeight = exercise.ActualWeight,
                                FailInRow = exercise.FailureInRow
                            });
                    }
                    // Berechne aktuelle Gewichte basierend auf vorherigen Gewichten
                    activeWeights = madCowWorkoutCalculator.CalculateFromPreviousWeight(lastExercises);
                }
                else
                {
                    // Fallback: Wenn kein passendes früheres Workout gefunden wurde, verwende Anfangsgewichte
                    string startingLoad = Model.WorkoutLoad;
                    List<Starting_Weights>  startingWeights =new List<Starting_Weights>();
                    startingWeights = await appDbContext.startingWeights.Where(x => x.UserId == userId).ToListAsync();

                    activeWeights = madCowWorkoutCalculator.CalculateFromStartingWeight(startingWeights, startingLoad);
                }
            }
        }
    }

    // Startet die Trainingseinheit und aktiviert den Timer
    private void ProgramStart()
    {
        isActive = true;
        StartTimer();
    }

    // Beginnt eine spezifische Übung und generiert die Aufwärm- und Arbeitssätze
    private void StartExercise(string exerciseName)
    {
        inExercise = true;
        warmUpDone = false;
        currentExercise = exerciseName;
        
        // Speichere das Maximalgewicht für diese Übung und generiere die Satzliste
        double maxWeight = activeWeights[exerciseName];
        Model.Weight = maxWeight;
        setList = madCowWorkoutCalculator.CalculateExercise(exerciseName, maxWeight, Model.WorkoutLoad);

    }

    // Markiert einen Aufwärmsatz als erledigt und prüft, ob alle Aufwärmsätze abgeschlossen sind
    private void WarmUpSetDone(ActiveExercise set)
    {
        int lastSet = setList.Where(x => x.SetType == "warmup").Count();
        set.IsSuccessful = true;
        
        // Wenn der letzte Aufwärmsatz abgeschlossen ist, wechsle zu Arbeitssätzen
        if(set.SetNumber == lastSet)
        {
            warmUpDone = true;
        }
        StateHasChanged();
    }

    // Markiert einen Arbeitssatz als erfolgreich oder nicht erfolgreich
    private void WorkingSetDone(ActiveExercise set, bool isSuccess)
    {
        int lastSet = setList.Where(x => x.SetType == "working").Count();
        set.IsSuccessful = isSuccess;
        

    }
    
    // Schließt die aktuelle Übung ab und speichert die Ergebnisse in der Datenbank
    private async Task FinishExercise()
    {
        // Bestimme, ob die Übung erfolgreich war (alle Sätze erfolgreich)
        bool success;
        int failureInRow;
        int exerciseId;
        int workoutId = workouts.First().WorkoutId;
        string exercise = setList.First().ExerciseName;

        // Eine Übung gilt als erfolgreich, wenn alle Sätze erfolgreich waren
        success = setList.All(x => x.IsSuccessful == true);        

        // Finde die Exercise-ID für die aktuelle Übung
        exerciseId = exercises.FirstOrDefault(x => x.ExerciseName == exercise).ExerciseId;
        Model.ExerciseId = exerciseId;
        Model.WorkoutId = workoutId;

        // Speichere die Übungsergebnisse in der Datenbank
        if(success)
        {
            // Bei Erfolg: Setze FailureInRow zurück auf 0
            WorkoutExercise workoutExercise = new WorkoutExercise
            {
                    WorkoutId = Model.WorkoutId,
                    ExerciseId = Model.ExerciseId,
                    ActualWeight = Model.Weight,
                    IsSuccessful = success,
                    FailureInRow = 0,
                    Notes = ""
            };
            appDbContext.workoutExercises.Add(workoutExercise);
        }
        else
        {
            // Bei Misserfolg: Erhöhe den FailureInRow-Zähler
            if(workoutExercises.Count() != 0)
            {
                failureInRow = workoutExercises.FirstOrDefault(x => x.ExerciseId == Model.ExerciseId).FailureInRow;
                failureInRow++;
            }
            else
            {
                failureInRow = 1;
            }

            WorkoutExercise workoutExercise = new WorkoutExercise
                {
                    WorkoutId = Model.WorkoutId,
                    ExerciseId = Model.ExerciseId,
                    ActualWeight = Model.Weight,
                    IsSuccessful = false,
                    FailureInRow = failureInRow,
                    Notes = ""
                };
            appDbContext.workoutExercises.Add(workoutExercise);
        }
        
        // Speichere die Änderungen in der Datenbank
        try
        {
            await appDbContext.SaveChangesAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        
        // Zurück zur Übungsauswahl und markiere diese Übung als erledigt
        inExercise = false;
        doneExercises.Add(exercise);
        StateHasChanged();
    }

    // Bricht die aktuelle Übung ab und kehrt zur Übungsauswahl zurück
    private void AbortExercise()
    {
        inExercise = false;
    }

    // Bricht das gesamte Workout ab und löscht den heutigen Workout-Eintrag
    private async Task AbortWorkout()
    {
        var workout = appDbContext.Workouts.FirstOrDefault(x => x.UserId == Model.UserId && x.Date.Date == DateTime.Now.Date);
        if(workout != null)
        {
            appDbContext.Workouts.Remove(workout);
            await appDbContext.SaveChangesAsync();
        }
        navigationManager.NavigateTo("/");
    }

    // Setzt den aktiven Workout-Zustand zurück, aber löscht keinen Datenbankeinträge
    private void AbortCurrent()
    {
        isActive = false;
        ResetTimer();
    }

    // Schließt das Workout ab und kehrt zur Startseite zurück
    private void FinishWorkout()
    {
        navigationManager.NavigateTo("/");
        ResetTimer();
    }
    
    // Timer-Steuerungsfunktionen
    private void StartTimer() => overallTimer.Start();
    private void StopTimer() => overallTimer.Stop();
    private void ResetTimer()
    {
        overallTimer.Stop();
        overallCurrentTime = 0;
        StateHasChanged();
    }
    
    #region
    private Modal abortModal;

    private Task AbortModalShow()
    {
        return abortModal.Show();
    }
    private Task AbortModalHide()
    {
        return abortModal.Hide();
    }
    #endregion
    
}
