@page "/active-workout"
@attribute [Authorize(Roles = "user")]

@using MCPowerlifting.Helper
@using MCPowerlifting.Models.Entities
@using MCPowerlifting.Models.ViewModels

@rendermode InteractiveServer
@inject UserService Userservice
@inject AppDbContext appDbContext
@inject NavigationManager navigationManager

<Div Display="Display.Flex" Class="justify-content-center" Style="min-width:30rem;">
    <Card Display="Display.Flex" Style="max-width:fit-content;">
        <CardHeader>
            <h1>Active Workout</h1>
        </CardHeader>
        <CardBody Display="Display.Flex" Class="justify-content-center">
            @if (!isActive)
            {
                <ListGroup Display="Display.Flex">
                    @foreach (var exercise in activeWeights)
                    {
                        <ListGroupItem>
                            <Card Class="justify-content-center mx-4">
                                <CardBody Display="Display.Flex" Class="justify-content-center mx-4">
                                    <h4>@exercise.Key: @exercise.Value Kg</h4>
                                </CardBody>
                            </Card>
                        </ListGroupItem>

                    }
                </ListGroup>
            }
            else if (isActive && !inExercise)
            {
                <CardBody>
                    @foreach (var exercise in activeWeights)
                    {
                        if(!doneExercises.Contains(exercise.Key))
                        {
                            <Card Class="my-2">
                                <CardHeader>
                                    <h2>@exercise.Key</h2>
                                </CardHeader>
                                <CardBody>
                                    <h4>Weight: @exercise.Value Kg</h4>
                                </CardBody>
                                <CardFooter Display="Display.Flex" Class="justify-content-center">
                                    <Button Color="Color.Primary" @onclick="() => StartExercise(exercise.Key)">Start @exercise.Key</Button>
                                </CardFooter>
                            </Card>
                        }
                        else
                        {
                            <Card Class="my-2">
                                <CardHeader>
                                    <h2>@exercise.Key</h2>
                                </CardHeader>
                                <CardBody>
                                    <h4>Weight: @exercise.Value Kg</h4>
                                </CardBody>
                                <CardFooter Display="Display.Flex" Class="justify-content-center">
                                    @* <Button Color="Color.Primary" @onclick="() => StartExercise(exercise.Key)">Start @exercise.Key</Button> *@
                                    <Alert Color="Color.Success">
                                        <AlertMessage>
                                            Done
                                        </AlertMessage>
                                    </Alert>
                                </CardFooter>
                            </Card>
                        }

                    }
                </CardBody>
            }
            @if (isActive && inExercise)
            {
                <Div Display="Display.Flex" Class="flex-column">
                    <Div Display="Display.Flex" Class="justify-content-center">
                        <h1>@currentExercise</h1>
                    </Div>
                    @if (!warmUpDone)
                    {
                        <Card Style="width:auto;">
                            <CardHeader>
                                <h3>Warm Up</h3>
                            </CardHeader>
                            <CardBody Display="Display.Flex" Class="justify-content-evenly">
                                @if (!setList.Any(x => x.SetType == "warmup"))
                                {
                                    <ListGroup Flush>
                                        <ListGroupItem>
                                            <p>Not Enough weight on your working set yet.</p>
                                        </ListGroupItem>
                                        <ListGroupItem>
                                            <p>No warm up needed. Jump straight to the working sets</p>
                                        </ListGroupItem>
                                        <ListGroupItem>
                                            <Button Color="Color.Success" @onclick="() => warmUpDone = true">Okay</Button>
                                        </ListGroupItem>
                                    </ListGroup>
                                }
                                else
                                {
                                    @foreach (var set in setList.Where(x => x.SetType == "warmup"))
                                    {
                                        <Card Class="mx-2">
                                            <CardHeader Display="Display.Flex" Class="justify-content-center">
                                                <h4>Set @set.SetNumber</h4>
                                            </CardHeader>
                                            <CardBody>
                                                @if (set.IsSuccessful == null)
                                                {
                                                    <h4>Weight: @set.SetWeight Kg</h4>
                                                    <h4>Reps: @set.SetReps</h4>
                                                }
                                                else
                                                {
                                                    <Alert Color="Color.Success" Visible>
                                                        <AlertMessage>Warm Up set Done</AlertMessage>
                                                    </Alert>
                                                }
                                            </CardBody>
                                            <CardFooter>
                                                <Button Color="Color.Success" name="@set.SetNumber" @onclick="() => WarmUpSetDone(set)">Done</Button>
                                            </CardFooter>
                                        </Card>
                                    }
                                }
                            </CardBody>
                        </Card>
                    }
                    else
                    {
                        <Card Display="Display.Flex">
                            <CardHeader>
                                Working Sets
                            </CardHeader>
                            <CardBody Display="Display.Flex">
                                @foreach (var set in setList.Where(x => x.SetType == "working"))
                                {
                                    <Card Class="mx-3">
                                        <CardHeader>
                                            @if (set.IsSuccessful.HasValue && set.IsSuccessful.Value)
                                            {
                                                <Div><h4>Set @set.SetNumber</h4></Div>
                                                <Div>
                                                    <Alert Color="Color.Success" Visible>
                                                        <AlertMessage>Set successful!</AlertMessage>
                                                    </Alert>
                                                </Div>

                                            }
                                            else if (set.IsSuccessful.HasValue && !set.IsSuccessful.Value)
                                            {
                                                <Div>
                                                    <h4>Set @set.SetNumber</h4>
                                                </Div>
                                                <Div>
                                                    <Alert Color="Color.Danger" Visible>
                                                        <AlertMessage>Failed set.</AlertMessage>
                                                    </Alert>
                                                </Div>

                                            }
                                            else
                                            {
                                                <h4>Set @set.SetNumber</h4>
                                            }
                                        </CardHeader>
                                        @if (set.IsSuccessful == null)
                                        {
                                            <CardBody>
                                                <h4>Weight: @set.SetWeight Kg</h4>
                                                <h4>Reps: @set.SetReps</h4>
                                            </CardBody>
                                        }
                                        @if (set.IsSuccessful == null)
                                        {
                                            <CardFooter>
                                                <Buttons>
                                                    <Button Color="Color.Success" name="@($"success-{set.SetNumber}")" Clicked="() => WorkingSetDone(set, true)">Success</Button>
                                                    <Button Color="Color.Danger" name="@($"failed-{set.SetNumber}")" Clicked="() => WorkingSetDone(set, false)">Failed</Button>
                                                </Buttons>
                                            </CardFooter>
                                        }
                                    </Card>
                                }
                            </CardBody>
                            <CardFooter>
                                <Button Color="Color.Dark" Clicked="AbortModalShow">Abort Exercise</Button>
                                <Button Color="Color.Primary" Clicked="FinishExercise">Finish Exercise</Button>
                            </CardFooter>
                        </Card>
                    }
                </Div> 
            }
        </CardBody>
        @if (!isActive)
        {
            <CardFooter Display="Display.Flex" Class="justify-content-between">
                <Button Color="Color.Dark" @onclick="AbortWorkout">Back</Button>
                <Button Color="Color.Primary" @onclick="ProgramStart">Start Time</Button>
            </CardFooter>
        }
        @if (isActive && !inExercise)
        {

            if(activeWeights.Count() == doneExercises.Count())
            {
                <CardFooter Display="Display.Flex" Class="justify-content-center">
                    <Button Color="Color.Success" @onclick="AbortCurrent">Finish Workout</Button>
                </CardFooter>
            }
            else
            {
                <CardFooter Display="Display.Flex" Class="justify-content-center">
                    <Button Color="Color.Danger" @onclick="AbortCurrent">Cancel Workout</Button>
                </CardFooter>
            }

        }
    </Card>
</Div>

<!-- #region Modal-->
<Modal @ref="abortModal">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Cancel Exercise?</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Alert Color="Color.Danger" Visible>
                <AlertMessage>
                    If you cancel the Exercise all progress will be lost!
                </AlertMessage>
            </Alert>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="AbortModalHide">Cancel</Button>
            <Button Color="Color.Primary" Clicked="@(() => {AbortExercise(); AbortModalHide();})">Abort</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
<!-- #endregion -->



@code {

    private ActiveWorkoutViewModel Model = new ActiveWorkoutViewModel();
    private MadCowWorkoutCalculator madCowWorkoutCalculator = new MadCowWorkoutCalculator();

    private ActiveExercise activeExercise = new ActiveExercise();

    private List<Exercise> exercises = new List<Exercise>();
    private List<Workout> workouts = new List<Workout>();
    private List<WorkoutExercise>? workoutExercises = new List<WorkoutExercise>();

    private List<string> doneExercises = new List<string>();

    private List<ActiveExercise> setList = new List<ActiveExercise>();

    private Dictionary<string, double> activeWeights = new Dictionary<string, double>();

    //Todo: Implementierung auswahl verschiedener Workouts
    // private List<Program> programs = new List<Program>();
    // InDev hilfe, da nur ein program
    private string aktivesProgram = "madcow 5x5";
    private string currentExercise;

    private bool isActive = false;
    private bool inExercise = false;
    private bool warmUpDone = false;


    private bool isNew = false;

    // private bool isSuccessChecked { get; set; } = false;
    // private bool isFailedChecked { get; set; } = false;

    override protected async Task OnInitializedAsync()
    {
        var userId = Userservice.GetCurrentUserId();
        if(userId.Value != null)
        {
            Model.UserId = userId.Value;
        }
        // Abrufen der Query-Parameter aus der URL
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        var queryParameters = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        exercises = await appDbContext.Exercises.ToListAsync();
        workoutExercises = await appDbContext.workoutExercises.ToListAsync();

        workouts = await appDbContext.Workouts.Where(x => x.UserId == userId).ToListAsync();
        workouts = workouts.OrderByDescending(x => x.Date).ToList();

        // TODO DELOAD CHECKEN UND SPEICHERN

        if (queryParameters.TryGetValue("isNew", out var isNewParam))
        {
            isNew = bool.Parse(isNewParam);

            if(isNew != null && true)
            {
                List<Starting_Weights> startingWeights = new List<Starting_Weights>();
                startingWeights = await appDbContext.startingWeights.Where(x => x.UserId == userId).ToListAsync();

                activeWeights = madCowWorkoutCalculator.CalculateFromStartingWeight(startingWeights);

                Model.WorkoutLoad = "medium";
            }
        }
        else
        {
            int? lastWorkoutId = workouts.FirstOrDefault(x => x.Date.Date != DateTime.Now.Date)?.WorkoutId;


            if (lastWorkoutId != null)
            {
                List<WorkoutExercise> lastWorkoutExercises = new List<WorkoutExercise>();
                List<ActiveExercise> lastExercises = new List<ActiveExercise>();

                string load = workouts.FirstOrDefault(x => x.WorkoutId == lastWorkoutId).Load;
                

                switch(load.ToLower())
                {
                    case "light":
                        Model.WorkoutLoad = "heavy";
                        break;
                    case "medium":
                        Model.WorkoutLoad = "light";
                        break;
                    case "heavy":
                        Model.WorkoutLoad = "medium";
                        break;
                }

                lastWorkoutId = workouts.FirstOrDefault(x => x.Load == Model.WorkoutLoad && x.Date.Date != DateTime.Now.Date).WorkoutId;
                lastWorkoutExercises = workoutExercises.Where(x => x.WorkoutId == lastWorkoutId).ToList();

                foreach (var exercise in lastWorkoutExercises)
                {

                    lastExercises.Add(new ActiveExercise
                        {
                            ExerciseName = exercise.Exercise.ExerciseName,
                            Load = Model.WorkoutLoad,
                            SetWeight = exercise.ActualWeight,
                            FailInRow = exercise.FailureInRow
                        });
                }

                activeWeights = madCowWorkoutCalculator.CalculateFromPreviousWeight(lastExercises);
            }
        }
    }

    private void ProgramStart()
    {
        isActive = true;
    }

    private void StartExercise(string exerciseName)
    {
        inExercise = true;
        warmUpDone = false;
        currentExercise = exerciseName;

        double maxWeight = activeWeights[exerciseName];
        Model.Weight = maxWeight;

        setList = madCowWorkoutCalculator.CalculateExercise(exerciseName, maxWeight, Model.WorkoutLoad);

    }

    private void WarmUpSetDone(ActiveExercise set)
    {
        int lastSet = setList.Where(x => x.SetType == "warmup").Count();
        set.IsSuccessful = true;
        if(set.SetNumber == lastSet)
        {
            warmUpDone = true;
        }
        StateHasChanged();
    }

    private void WorkingSetDone(ActiveExercise set, bool isSuccess)
    {
        int lastSet = setList.Where(x => x.SetType == "working").Count();
        set.IsSuccessful = isSuccess;

    }

    private async Task FinishExercise()
    {
        bool success;
        int failureInRow;
        int exerciseId;
        int workoutId = workouts.First().WorkoutId;
        string exercise = setList.First().ExerciseName;

        success = setList.All(x => x.IsSuccessful == true);        
        exerciseId = exercises.FirstOrDefault(x => x.ExerciseName == exercise).ExerciseId;
        Model.ExerciseId = exerciseId;
        Model.WorkoutId = workoutId;



        if(success)
        {
            WorkoutExercise workoutExercise = new WorkoutExercise
            {
                    WorkoutId = Model.WorkoutId,
                    ExerciseId = Model.ExerciseId,
                    ActualWeight = Model.Weight,
                    IsSuccessful = success,
                    FailureInRow = 0,
                    Notes = ""
            };
            appDbContext.workoutExercises.Add(workoutExercise);
        }
        else
        {
            if(workoutExercises.Count() != 0)
            {
                failureInRow = workoutExercises.FirstOrDefault(x => x.ExerciseId == Model.ExerciseId).FailureInRow;
                failureInRow++;
            }
            else
            {
                failureInRow = 1;
            }

            WorkoutExercise workoutExercise = new WorkoutExercise
                {
                    WorkoutId = Model.WorkoutId,
                    ExerciseId = Model.ExerciseId,
                    ActualWeight = Model.Weight,
                    IsSuccessful = false,
                    FailureInRow = failureInRow,
                    Notes = ""
                };
            appDbContext.workoutExercises.Add(workoutExercise);
        }
        try
        {
            await appDbContext.SaveChangesAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        inExercise = false;
        doneExercises.Add(exercise);
        StateHasChanged();
    }


    private void AbortExercise()
    {
        inExercise = false;
    }

    private void AbortWorkout()
    {
        navigationManager.NavigateTo("/");
    }

    private void AbortCurrent()
    {
        isActive = false;
    }


    #region
    private Modal abortModal;

    private Task AbortModalShow()
    {
        return abortModal.Show();
    }
    private Task AbortModalHide()
    {
        return abortModal.Hide();
    }
    #endregion
    
}
