@page "/Workout/active-workout"
@attribute [Authorize]


@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using MudCow.Helper
@using MudCowV2.Components.Pages.Utility
@using MudCowV2.Helper
@using MudCowV2.Models.Entities
@using MudCowV2.Data
@using MudCowV2.Models.ViewModels
@using MudCowV2.Services
@using System.Timers
@using System.Security.Claims


@* @inject UserService Userservice *@
@inject AppDbContext appDbContext
@inject NavigationManager navigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Aktives Training</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-6">
    <MudCard Elevation="3" Class="mx-auto" Style="max-width: 800px;">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h4" Color="Color.Primary">Aktives Training</MudText>
                @if(isActive)
                {
                    <MudText Typo="Typo.subtitle1" Color="Color.Secondary">Gesamtzeit: @overallFormattedTime</MudText>
                }
            </CardHeaderContent>
            <CardHeaderActions>
                <MudIcon Icon="@Icons.Material.Filled.FitnessCenter" Color="Color.Primary" Size="Size.Large"/>
            </CardHeaderActions>
        </MudCardHeader>

        <MudDivider/>

        <MudCardContent>
            @* Zustand 1: Workout noch nicht gestartet *@
            @if (!isActive)
            {
                <MudList T="string" Dense="false" DisablePadding="true">
                    @foreach (var exercise in activeWeights)
                    {
                        double roundedWeight = Math.Round(exercise.Value, 2);
                        <MudListItem T="string">
                            <MudPaper Elevation="2" Class="pa-4">
                                <div class="d-flex justify-space-between align-center">
                                    <MudText Typo="Typo.h6">@exercise.Key</MudText>
                                    <MudText Color="Color.Primary">@roundedWeight kg</MudText>
                                </div>
                            </MudPaper>
                        </MudListItem>
                    }
                </MudList>
            }

            @* Zustand 2: Workout gestartet, keine spezifische Übung ausgewählt *@
            else if (isActive && !inExercise)
            {
                <MudGrid>
                    @foreach (var exercise in activeWeights)
                    {
                        double weight = exercise.Value * 2;
                        double roundedWeight = Math.Round(weight, MidpointRounding.AwayFromZero) / 2;

                        <MudItem xs="12">
                            <MudCard Elevation="2" Class="my-2">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">@exercise.Key</MudText>
                                        <MudText Color="Color.Secondary">@roundedWeight kg</MudText>
                                    </CardHeaderContent>
                                    <CardHeaderActions>
                                        @if(doneExercises.Contains(exercise.Key))
                                        {
                                            <MudChip T="string" Color="Color.Success" Icon="@Icons.Material.Filled.Check">Abgeschlossen</MudChip>
                                        }
                                        else
                                        {
                                            <MudButton Variant="Variant.Filled" 
                                            Color="Color.Primary"
                                            OnClick="@(() => StartExercise(exercise.Key))"
                                            StartIcon="@Icons.Material.Filled.PlayArrow">
                                                Übung Starten
                                            </MudButton>
                                        }
                                    </CardHeaderActions>
                                </MudCardHeader>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            }

            @* Zustand 3: Eine spezifische Übung ist aktiv *@
            @if (isActive && inExercise)
            {
                <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">@currentExercise</MudText>

                @if (!warmUpDone)
                {
                    <MudCard Elevation="2" Class="mb-4">
                        <MudCardHeader>
                            <MudText Typo="Typo.h5">Aufwärmen</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            @if (!setList.Any(x => x.SetType == "warmup"))
                            {
                                <MudAlert Severity="Severity.Info">
                                    <MudText>Kein Aufwärmen nötig. Sie können direkt mit den Arbeitsätzen beginnen.</MudText>
                                </MudAlert>
                                <div class="d-flex justify-center mt-4">
                                    <MudButton Color="Color.Success" 
                                    Variant="Variant.Filled"
                                    OnClick="@(() => warmUpDone = true)"
                                    StartIcon="@Icons.Material.Filled.Check">
                                        Verstanden
                                    </MudButton>
                                </div>
                            }
                            else
                            {
                                <MudGrid>
                                    @foreach (var set in setList.Where(x => x.SetType == "warmup"))
                                    {
                                        <MudItem xs="12" sm="6" md="4">
                                            <MudCard Elevation="1">
                                                <MudCardHeader>
                                                    <CardHeaderContent>
                                                        <MudText Typo="Typo.h6">Satz @set.SetNumber</MudText>
                                                    </CardHeaderContent>
                                                </MudCardHeader>
                                                <MudCardContent>
                                                    @if (set.IsSuccessful == null)
                                                    {
                                                        <MudText>Gewicht: @set.SetWeight kg</MudText>
                                                        <MudText>Wiederholungen: @set.SetReps</MudText>
                                                    }
                                                    else
                                                    {
                                                        <MudChip T="string" Color="Color.Success" Icon="@Icons.Material.Filled.Check">
                                                            Aufwärmsatz abgeschlossen
                                                        </MudChip>
                                                    }
                                                </MudCardContent>
                                                @if (set.IsSuccessful == null)
                                                {
                                                    <MudCardActions>
                                                        <MudButton Color="Color.Success"
                                                        Variant="Variant.Filled"
                                                        OnClick="@(() => WarmUpSetDone(set))"
                                                        FullWidth="true">
                                                            Abschließen
                                                        </MudButton>
                                                    </MudCardActions>
                                                }
                                            </MudCard>
                                        </MudItem>
                                    }
                                </MudGrid>
                            }
                        </MudCardContent>
                    </MudCard>
                }
                else
                {
                    <MudCard Elevation="2">
                        <MudCardHeader>
                            <MudText Typo="Typo.h5">Arbeitsätze</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid>
                                @foreach (var set in setList.Where(x => x.SetType == "working"))
                                {
                                    double weight = set.SetWeight * 2;
                                    double roundedWeight = Math.Round(weight, MidpointRounding.AwayFromZero) / 2;

                                    <MudItem xs="12" sm="6" md="4">
                                        <MudCard Elevation="1">
                                            <MudCardHeader>
                                                <CardHeaderContent>
                                                    <MudText Typo="Typo.h6">Satz @set.SetNumber</MudText>
                                                </CardHeaderContent>
                                                <CardHeaderActions>
                                                    @if (set.IsSuccessful.HasValue)
                                                    {
                                                        <MudChip T="string" Color="@(set.IsSuccessful.Value ? Color.Success : Color.Error)"
                                                        Icon="@(set.IsSuccessful.Value ? Icons.Material.Filled.Check : Icons.Material.Filled.Close)">
                                                            @(set.IsSuccessful.Value ? "Erfolgreich" : "Nicht geschafft")
                                                        </MudChip>
                                                    }
                                                </CardHeaderActions>
                                            </MudCardHeader>
                                            @if (set.IsSuccessful == null)
                                            {
                                                <MudCardContent>
                                                    <MudText>Gewicht: @roundedWeight kg</MudText>
                                                    <MudText>Wiederholungen: @set.SetReps</MudText>
                                                </MudCardContent>
                                                <MudCardActions>
                                                    <MudButton Color="Color.Success"
                                                    Variant="Variant.Filled"
                                                    OnClick="@(() => WorkingSetDone(set, true))"
                                                    Class="mx-1">
                                                        Geschafft
                                                    </MudButton>
                                                    <MudButton Color="Color.Error"
                                                    Variant="Variant.Filled"
                                                    OnClick="@(() => WorkingSetDone(set, false))"
                                                    Class="mx-1">
                                                        Nicht geschafft
                                                    </MudButton>
                                                </MudCardActions>
                                            }
                                        </MudCard>
                                    </MudItem>
                                }
                            </MudGrid>
                        </MudCardContent>
                        <MudCardActions Class="d-flex justify-space-between pa-4">
                            <MudButton Color="Color.Error"
                            Variant="Variant.Outlined"
                            OnClick="AbortModalShow"
                            StartIcon="@Icons.Material.Filled.Close">
                                Übung Abbrechen
                            </MudButton>
                            <MudButton Color="Color.Success"
                            Variant="Variant.Filled"
                            OnClick="FinishExercise"
                            EndIcon="@Icons.Material.Filled.Check">
                                Übung Abschließen
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                }
            }
        </MudCardContent>

        <MudDivider/>

        <MudCardActions Class="pa-4">
            @if (!isActive)
            {
                <div class="d-flex justify-space-between w-100">
                    <MudButton Color="Color.Error"
                    Variant="Variant.Outlined"
                    OnClick="AbortWorkout"
                    StartIcon="@Icons.Material.Filled.ArrowBack">
                        Zurück
                    </MudButton>
                    <MudButton Color="Color.Primary"
                    Variant="Variant.Filled"
                    OnClick="ProgramStart"
                    EndIcon="@Icons.Material.Filled.Timer">
                        Zeit Starten
                    </MudButton>
                </div>
            }
            else if (isActive && !inExercise)
            {
                @if(activeWeights.Count() == doneExercises.Count())
                {
                    <MudButton Color="Color.Success"
                    Variant="Variant.Filled"
                    OnClick="FinishWorkout"
                    FullWidth="true"
                    StartIcon="@Icons.Material.Filled.CheckCircle">
                        Training Abschließen
                    </MudButton>
                }
                else
                {
                    <MudButton Color="Color.Error"
                    Variant="Variant.Outlined"
                    OnClick="AbortCurrent"
                    FullWidth="true"
                    StartIcon="@Icons.Material.Filled.Cancel">
                        Training Abbrechen
                    </MudButton>
                }
            }
        </MudCardActions>

        @if(isPauseActive)
        {
            <MudPaper Class="pa-4" Elevation="0">
                <MudAlert Icon="@Icons.Material.Filled.Timer" Severity="Severity.Info">
                    <MudText Typo="Typo.h6">Pause</MudText>
                    <MudText>
                        @if (restMinutes)
                        {
                            <span>3 Minuten Pause: @pauseFormattedTime</span>
                        }
                        else
                        {
                            <span>5 Minuten Pause: @pauseFormattedTime</span>
                        }
                    </MudText>
                </MudAlert>
            </MudPaper>
        }
    </MudCard>
</MudContainer>

@code {
    [Inject] private AuthenticationStateProvider AuthStateProvider { get; set; }

    // ViewModel für die aktive Workout-Sitzung
    private ActiveWorkoutViewModel Model = new ActiveWorkoutViewModel();

    // Helper für die Berechnung der MadCow-spezifischen Gewichte
    private MadCowWorkoutCalculator madCowWorkoutCalculator = new MadCowWorkoutCalculator();

    // Datenstruktur für die aktive Übung
    private ActiveExercise activeExercise = new ActiveExercise();

    // Listen für den Zugriff auf Datenbank-Entitäten
    private List<Exercise> exercises = new List<Exercise>();
    private List<Workout> workouts = new List<Workout>();
    private List<WorkoutExercise>? workoutExercises = new List<WorkoutExercise>();

    // Liste für bereits absolvierte Übungen in der aktuellen Sitzung
    private List<string> doneExercises = new List<string>();

    // Liste für Aufwärm- und Arbeitssätze der aktuellen Übung
    private List<ActiveExercise> setList = new List<ActiveExercise>();

    // Aktuelle Gewichte für alle Übungen dieser Trainingseinheit
    private Dictionary<string, double> activeWeights = new Dictionary<string, double>();

    // Timer für die Trainingszeit
    private Timer overallTimer = new Timer();
    private Timer pauseTimer = new Timer();
    private int overallCurrentTime = 0;
    private int pauseCurrentTime = 0;
    private string pauseFormattedTime => TimeSpan.FromSeconds(pauseCurrentTime).ToString(@"hh\:mm\:ss");
    private string overallFormattedTime => TimeSpan.FromSeconds(overallCurrentTime).ToString(@"hh\:mm\:ss");
    private bool  restMinutes;


    /*
    * 
    * Todo: Implementierung auswahl verschiedener Workouts
    * private List<Program> programs = new List<Program>();
    * InDev hilfe, da nur ein program
    * 
    */

    // Aktuelle Trainingsparameter
    private string aktivesProgram = "madcow 5x5";
    private string currentExercise;

    // Statusflags zur Steuerung der UI-Ansicht
    private bool isActive = false;
    private bool inExercise = false;
    private bool warmUpDone = false;
    private bool isPauseActive = false;

    // Flag zur Identifizierung eines neuen Workout-Zyklus
    private bool isNew = false;

    // Initialisierung des Timers beim Erstladen der Komponente
    protected override void OnInitialized()
    {
        overallTimer = new Timer(1000);
        pauseTimer = new Timer(1000);

        overallTimer.Elapsed += OnTimerElapsed;
        overallTimer.AutoReset = true;

        pauseTimer.Elapsed += OnPauseTimerElapsed;
        pauseTimer.AutoReset = true;
    }

    private async Task<int> GetUserIdAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var userIdClaim = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier);

        if (userIdClaim != null && int.TryParse(userIdClaim.Value, out var userId))
        {
            return userId;
        }

        return 0; // oder einen Standardwert oder eine Exception werfen
    }

    // Lädt alle notwendigen Daten beim Start der Komponente
    override protected async Task OnInitializedAsync()
    {
        // Check UserID
        int userId = await GetUserIdAsync();
        Model.UserId = userId;


        // Query-Parameter aus der URL auslesen (für isNew-Parameter)
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        var queryParameters = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        // Grundlegende Daten aus der Datenbank laden
        exercises = await appDbContext.Exercises.ToListAsync();
        workoutExercises = await appDbContext.workoutExercises.ToListAsync();
        workouts = await appDbContext.Workouts.Where(x => x.UserId == Model.UserId).ToListAsync();
        workouts = workouts.OrderByDescending(x => x.Date).ToList();

        // Entscheidungslogik: Neues Workout oder Fortsetzung eines bestehenden Zyklus
        if (queryParameters.TryGetValue("isNew", out var isNewParam))
        {
            // Fall: Neues Workout - basierend auf Anfangsgewichten
            isNew = bool.Parse(isNewParam);

            if(isNew != null && true)
            {
                // Lädt Anfangsgewichte des Benutzers und berechnet die Trainingsgewichte
                List<Starting_Weights> startingWeights = new List<Starting_Weights>();
                startingWeights = await appDbContext.startingWeights.Where(x => x.UserId == Model.UserId).ToListAsync();

                activeWeights = madCowWorkoutCalculator.CalculateFromStartingWeight(startingWeights, "medium");

                Model.WorkoutLoad = "medium";
            }
        }
        else
        {
            // Fall: Fortsetzung des Zyklus - basierend auf vorherigen Workouts
            int? lastWorkoutId = workouts.FirstOrDefault(x => x.Date.Date != DateTime.Now.Date)?.WorkoutId;


            if (lastWorkoutId != null)
            {
                // Vorbereitung der Datenstrukturen
                List<WorkoutExercise> lastWorkoutExercises = new List<WorkoutExercise>();
                List<ActiveExercise> lastExercises = new List<ActiveExercise>();

                List<ActiveExercise> lastWorkingWeights = new List<ActiveExercise>();
                List<ActiveExercise> tempWorkingWeights = new List<ActiveExercise>();
                List<WorkoutExercise> TESTLIST = new List<WorkoutExercise>();
                List<int> workoutIds = new List<int>();

                // Bestimme den Load-Typ des letzten Workouts
                string load = workouts.FirstOrDefault(x => x.WorkoutId == lastWorkoutId).Load;

                // MadCow-Rotation des Load-Typs basierend auf dem letzten Workout
                switch(load.ToLower())
                {
                    case "light":
                        Model.WorkoutLoad = "heavy";
                        break;
                    case "medium":
                        Model.WorkoutLoad = "light";
                        break;
                    case "heavy":
                        Model.WorkoutLoad = "medium";
                        break;
                }

                // Suche nach einem früheren Workout mit dem gleichen Load-Typ
                if (workouts.Any(x => x.Load == Model.WorkoutLoad && x.Date.Date != DateTime.Now.Date))
                {
                    // Finde das letzte Workout mit dem aktuellen Load-Typ
                    lastWorkoutId = workouts.FirstOrDefault(x => x.Load == Model.WorkoutLoad && x.Date.Date != DateTime.Now.Date).WorkoutId;
                    lastWorkoutExercises = workoutExercises.Where(x => x.WorkoutId == lastWorkoutId).ToList();

                    // Finde aktuelle gewichte

                    foreach(var workId in workouts)
                    {
                        workoutIds.Add(workId.WorkoutId);
                    }

                    foreach (var id in workoutIds)
                    {
                        TESTLIST = workoutExercises.Where(x => x.WorkoutId == id).ToList();

                        foreach(var exercise in TESTLIST)
                        {
                            lastWorkingWeights.Add(new ActiveExercise
                            {
                                ExerciseName = exercise.Exercise.ExerciseName,
                                SetWeight = exercise.ActualWeight
                            });
                        }

                    }

                    // Konvertiere die WorkoutExercise-Einträge in ActiveExercise-Objekte
                    foreach (var exercise in lastWorkoutExercises)
                    {
                        string name = exercise.Exercise.ExerciseName;

                        tempWorkingWeights = lastWorkingWeights.Where(x => x.ExerciseName == name).ToList();
                        double lastWorkingWeight = 0;

                        if(lastWorkingWeights != null)
                        {
                            lastWorkingWeight = tempWorkingWeights.Max(x => x.SetWeight);
                        }

                        lastExercises.Add(new ActiveExercise
                            {
                                ExerciseName = exercise.Exercise.ExerciseName,
                                Load = Model.WorkoutLoad,
                                SetWeight = lastWorkingWeight,
                                FailInRow = exercise.FailureInRow
                            });
                    }
                    // Berechne aktuelle Gewichte basierend auf vorherigen Gewichten
                   activeWeights = madCowWorkoutCalculator.CalculateFromPreviousWeight(lastExercises);
                }
                else
                {
                    // Fallback: Wenn kein passendes früheres Workout gefunden wurde, verwende Anfangsgewichte
                    string startingLoad = Model.WorkoutLoad;
                    List<Starting_Weights>  startingWeights =new List<Starting_Weights>();
                    startingWeights = await appDbContext.startingWeights.Where(x => x.UserId == Model.UserId).ToListAsync();

                    activeWeights = madCowWorkoutCalculator.CalculateFromStartingWeight(startingWeights, startingLoad);
                }
            }
        }
    }

    // Timer-Callback: Aktualisiert die Anzeige jede Sekunde
    private void OnPauseTimerElapsed(object sender, ElapsedEventArgs e)
    {
        pauseCurrentTime++;
        InvokeAsync(() => StateHasChanged());
    }

    private void OnTimerElapsed(object sender, ElapsedEventArgs e)
    {
        overallCurrentTime++;
        InvokeAsync(() => StateHasChanged());
    }

    // Startet die Trainingseinheit und aktiviert den Timer
    private void ProgramStart()
    {
        isActive = true;
        OverallStartTimer();
    }

    // Beginnt eine spezifische Übung und generiert die Aufwärm- und Arbeitssätze
    private void StartExercise(string exerciseName)
    {
        inExercise = true;
        warmUpDone = false;
        currentExercise = exerciseName;

        // Speichere das Maximalgewicht für diese Übung und generiere die Satzliste
        double maxWeight = activeWeights[exerciseName];
        Model.Weight = maxWeight;
        setList = madCowWorkoutCalculator.CalculateExercise(exerciseName, maxWeight, Model.WorkoutLoad);

    }

    // Markiert einen Aufwärmsatz als erledigt und prüft, ob alle Aufwärmsätze abgeschlossen sind
    private void WarmUpSetDone(ActiveExercise set)
    {
        int lastSet = setList.Where(x => x.SetType == "warmup").Count();
        set.IsSuccessful = true;

        // Wenn der letzte Aufwärmsatz abgeschlossen ist, wechsle zu Arbeitssätzen
        if(set.SetNumber == lastSet)
        {
            warmUpDone = true;
            
        }
        StateHasChanged();
    }

    // Markiert einen Arbeitssatz als erfolgreich oder nicht erfolgreich
    private void WorkingSetDone(ActiveExercise set, bool isSuccess)
    {
        int lastSet = setList.Where(x => x.SetType == "working").Count();
        set.IsSuccessful = isSuccess;
        restMinutes = isSuccess;
        if(set.SetNumber == lastSet)
        {
            isPauseActive = false;
            PauseStopTimer();
        }
        else
        {
            isPauseActive = true;
            PauseRestartTimer();
        }

    }

    // Schließt die aktuelle Übung ab und speichert die Ergebnisse in der Datenbank
    private async Task FinishExercise()
    {
        // Bestimme, ob die Übung erfolgreich war (alle Sätze erfolgreich)
        bool success;
        int failureInRow;
        int exerciseId;
        int workoutId = workouts.First().WorkoutId;
        string exercise = setList.First().ExerciseName;

        // Eine Übung gilt als erfolgreich, wenn alle Sätze erfolgreich waren
        success = setList.All(x => x.IsSuccessful == true);        

        // Finde die Exercise-ID für die aktuelle Übung
        exerciseId = exercises.FirstOrDefault(x => x.ExerciseName == exercise).ExerciseId;
        Model.ExerciseId = exerciseId;
        Model.WorkoutId = workoutId;

        // Speichere die Übungsergebnisse in der Datenbank
        if(success)
        {
            // Bei Erfolg: Setze FailureInRow zurück auf 0
            WorkoutExercise workoutExercise = new WorkoutExercise
            {
                    WorkoutId = Model.WorkoutId,
                    ExerciseId = Model.ExerciseId,
                    ActualWeight = Model.Weight,
                    IsSuccessful = success,
                    FailureInRow = 0,
                    Notes = ""
            };
            appDbContext.workoutExercises.Add(workoutExercise);
        }
        else
        {
            // Bei Misserfolg: Erhöhe den FailureInRow-Zähler
            if(workoutExercises.Count() != 0)
            {
                failureInRow = workoutExercises.FirstOrDefault(x => x.ExerciseId == Model.ExerciseId).FailureInRow;
                failureInRow++;
            }
            else
            {
                failureInRow = 1;
            }

            WorkoutExercise workoutExercise = new WorkoutExercise
                {
                    WorkoutId = Model.WorkoutId,
                    ExerciseId = Model.ExerciseId,
                    ActualWeight = Model.Weight,
                    IsSuccessful = false,
                    FailureInRow = failureInRow,
                    Notes = ""
                };
            appDbContext.workoutExercises.Add(workoutExercise);
        }

        // Speichere die Änderungen in der Datenbank
        try
        {
            await appDbContext.SaveChangesAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }

        // Zurück zur Übungsauswahl und markiere diese Übung als erledigt
        inExercise = false;
        doneExercises.Add(exercise);
        StateHasChanged();
    }

    // Bricht die aktuelle Übung ab und kehrt zur Übungsauswahl zurück
    private void AbortExercise()
    {
        inExercise = false;
        isPauseActive = false;
        PauseStopTimer();
        pauseCurrentTime = 0;
    }

    // Bricht das gesamte Workout ab und löscht den heutigen Workout-Eintrag
    private async Task AbortWorkout()
    {
        var workout = appDbContext.Workouts.FirstOrDefault(x => x.UserId == Model.UserId && x.Date.Date == DateTime.Now.Date);
        if(workout != null)
        {
            appDbContext.Workouts.Remove(workout);
            await appDbContext.SaveChangesAsync();
        }
        navigationManager.NavigateTo("/");
    }

    // Setzt den aktiven Workout-Zustand zurück, aber löscht keinen Datenbankeinträge
    private void AbortCurrent()
    {
        isActive = false;
        OverallResetTimer();
    }

    // Schließt das Workout ab und kehrt zur Startseite zurück
    private void FinishWorkout()
    {
        navigationManager.NavigateTo("/");
        OverallResetTimer();
    }

    // Timer-Steuerungsfunktionen
    private void OverallStartTimer() => overallTimer.Start();
    private void PauseStopTimer() => pauseTimer.Stop();

    private void PauseStartTimer()
    {
        pauseTimer.Start();
    }

    private void OverallResetTimer()
    {
        overallTimer.Stop();
        overallCurrentTime = 0;
        StateHasChanged();
    }

    private void PauseRestartTimer()
    {
        pauseTimer.Stop();
        pauseCurrentTime = 0;
        PauseStartTimer();
        StateHasChanged();
    }

    private async Task AbortModalShow()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Small
        };

        var dialog = await DialogService.ShowAsync<AbortExerciseDialog>("Übung Abbrechen", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            AbortExercise();
        }
    }
}