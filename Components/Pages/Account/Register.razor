@page "/register"

@using Microsoft.EntityFrameworkCore
@using MudCowV2.Data
@using MudCowV2.Models
@using System.ComponentModel.DataAnnotations
@using MudCowV2.Models.Entities
@using System.Text.RegularExpressions
@using MudCowV2.Models.ViewModels
@using MudCowV2.Services.CryptServices

@inject AppDbContext appDbContext
@inject NavigationManager navigationManager

<PageTitle>Register</PageTitle>

<MudPaper Class="pa-16 ma-2" Elevation="3" Style="min-width: 300px; width: 100%;">
    <MudGrid Justify="Justify.Center" Style="min-width: 600px;">
        <MudItem xs="12" sm="8">
            <MudPaper Class="pa-4">
                <MudForm @ref="RegisterForm" @bind-Errors="@errors">
                    <MudTextField T="string" Label="Username" Required="true" RequiredError="User name is required!" @bind-Value="Model.UserName" />
                    <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                                  Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})"
                                  @bind-Value="Model.Email" />
                    <MudTextField T="string" Label="Password" HelperText="Choose a strong password"
                                  InputType="InputType.Password"
                                  Required="true"
                                  RequiredError="Password is required!"
                                  @bind-Value="Model.Password" />
                    <MudTextField T="string"
                                  Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                                  @bind-Value="Model.ConfirmPassword" />
                    <div class="d-flex justify-content-end">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="RegisterUser">Register</MudButton>
                    </div>
                </MudForm>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudPaper>





@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    public RegisterViewModel Model { get; set; } = new RegisterViewModel();

    private string? errorMessage;

    private PCrypt encrypt = new PCrypt();

    private async Task RegisterUser()
    {

        // Email-Validation
        if (!new EmailAddressAttribute().IsValid(Model.Email))
        {
            errorMessage = "Invalid Email Address";
            return;
        }

        // User-Validation
        var existingUser = await appDbContext.Users
                            .FirstOrDefaultAsync(u => u.Email == Model.Email);

        if (existingUser != null)
        {

            errorMessage = "This E-mail adress is already in Use";

            return;
        }
        // Password-Validation
        if (Model.Password != Model.ConfirmPassword)
        {

            errorMessage = "Passwords do not match";

            return;
        }


        // Hashgeneration
        Model.passwordHash = encrypt.pEncrypt(Model.Password);

        User newUser = new User
            {
                Username = Model.UserName,
                Email = Model.Email,
                Passwordhash = Model.passwordHash,
                Role = "user"
            };

        // Hinzufügen des neuen Users
        appDbContext.Users.Add(newUser);

        try
        {
            await appDbContext.SaveChangesAsync();
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while registering. Please try again";
        }


        navigationManager.NavigateTo("/Account/Login");
    }



    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm RegisterForm;

}
